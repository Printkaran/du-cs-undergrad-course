<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Machine [
<!ELEMENT Machine (PunctChar*, Field*, FileChannel*, Register*, RegisterArray*, ConditionBit*, RAM*, Set*, Test*, Increment*, Shift*, Logical*, Arithmetic*, Branch*, TransferRtoR*, TransferRtoA*, TransferAtoR*, Decode*, SetCondBit*, IO*, MemoryAccess*, End, Comment*, EQU*, FetchSequence, MachineInstruction*, HighlightingInfo?, LoadingInfo?, ModuleWindowsInfo?) >
<!ATTLIST Machine name CDATA "unnamed">
<!ELEMENT PunctChar EMPTY>
<!ATTLIST PunctChar char CDATA #REQUIRED use  (symbol|token|label|comment|pseudo|illegal) #REQUIRED>
<!ELEMENT Field (FieldValue*)>
<!ATTLIST Field name CDATA #REQUIRED type  (required|optional|ignored) #REQUIRED numBits CDATA #REQUIRED relativity (absolute|pcRelativePreIncr|pcRelativePostIncr) #REQUIRED defaultValue CDATA #REQUIRED signed (true|false) #REQUIRED offset CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT FieldValue EMPTY>
<!ATTLIST FieldValue name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT FileChannel EMPTY>
<!ATTLIST FileChannel file CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Register EMPTY>
<!ATTLIST Register name CDATA #REQUIRED width CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT RegisterArray (Register+)>
<!ATTLIST RegisterArray name CDATA #REQUIRED width CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT ConditionBit EMPTY>
<!ATTLIST ConditionBit name CDATA #REQUIRED bit CDATA #REQUIRED register IDREF #REQUIRED halt (true|false) "false" id ID #REQUIRED>
<!ELEMENT RAM EMPTY>
<!ATTLIST RAM name CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED cellSize CDATA "8">
<!ELEMENT Increment EMPTY>
<!ATTLIST Increment name CDATA #REQUIRED register IDREF #REQUIRED overflowBit IDREF #IMPLIED delta CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Arithmetic EMPTY>
<!ATTLIST Arithmetic name CDATA #REQUIRED type (ADD|SUBTRACT|MULTIPLY|DIVIDE) #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED overflowBit IDREF #IMPLIED  carryBit IDREF #IMPLIED  id ID #REQUIRED>
<!ELEMENT TransferRtoR EMPTY>
<!ATTLIST TransferRtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT TransferRtoA EMPTY>
<!ATTLIST TransferRtoA name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT TransferAtoR EMPTY>
<!ATTLIST TransferAtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT Shift EMPTY>
<!ATTLIST Shift name CDATA #REQUIRED source IDREF #REQUIRED destination IDREF #REQUIRED type (logical | arithmetic | cyclic) #REQUIRED direction (right | left) #REQUIRED distance CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Branch EMPTY>
<!ATTLIST Branch name CDATA #REQUIRED amount CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Logical EMPTY>
<!ATTLIST Logical name CDATA #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED type (AND | OR | NAND | NOR | XOR | NOT) #REQUIRED id ID #REQUIRED>
<!ELEMENT Set EMPTY>
<!ATTLIST Set name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED value CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Test EMPTY >
<!ATTLIST Test name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED comparison (EQ | NE | LT | GT | LE | GE ) #REQUIRED value CDATA #REQUIRED omission CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Decode EMPTY >
<!ATTLIST Decode name CDATA #REQUIRED ir IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT IO EMPTY >
<!ATTLIST IO name CDATA #REQUIRED direction (input | output) #REQUIRED type (integer | ascii | unicode) #REQUIRED buffer IDREF #REQUIRED connection CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT MemoryAccess EMPTY >
<!ATTLIST MemoryAccess name CDATA #REQUIRED direction (read | write ) #REQUIRED memory IDREF #REQUIRED data IDREF #REQUIRED address IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT SetCondBit EMPTY >
<!ATTLIST SetCondBit name CDATA #REQUIRED bit IDREF #REQUIRED value (0 | 1) #REQUIRED id ID #REQUIRED>
<!ELEMENT End EMPTY>
<!ATTLIST End id ID #REQUIRED>
<!ELEMENT Comment EMPTY>
<!ATTLIST Comment name CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Microinstruction EMPTY>
<!ATTLIST Microinstruction microRef IDREF #REQUIRED>
<!ELEMENT MachineInstruction (Microinstruction*)>
<!ATTLIST MachineInstruction name CDATA #REQUIRED opcode CDATA #REQUIRED format CDATA #REQUIRED>
<!ELEMENT FetchSequence (Microinstruction*) >
<!ELEMENT EQU EMPTY>
<!ATTLIST EQU name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT HighlightingInfo (RegisterRAMPair*)>
<!ELEMENT RegisterRAMPair EMPTY>
<!ATTLIST RegisterRAMPair register IDREF #REQUIRED ram IDREF #REQUIRED dynamic (true|false) #REQUIRED>
<!ELEMENT LoadingInfo EMPTY>
<!ATTLIST LoadingInfo ram IDREF #IMPLIED startingAddress CDATA "0">
<!ELEMENT ModuleWindowsInfo ((RegisterWindowInfo | RegisterArrayWindowInfo | RAMWindowInfo)*) >
<!ELEMENT RegisterWindowInfo EMPTY>
<!ATTLIST RegisterWindowInfo top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode)  "Decimal">
<!ELEMENT RegisterArrayWindowInfo EMPTY>
<!ATTLIST RegisterArrayWindowInfo array IDREF #REQUIRED top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal">
<!ELEMENT RAMWindowInfo EMPTY>
<!ATTLIST RAMWindowInfo ram IDREF #REQUIRED cellSize CDATA "1" top CDATA "50" left CDATA "50" width CDATA "450" height CDATA "450" contentsbase (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal" addressbase (Decimal|Binary|Hexadecimal) "Decimal">
]>

<Machine name="MACHINE" >
	<!--............. Punctuation Options .............-->
	<PunctChar char="!" use="symbol" />
	<PunctChar char="#" use="symbol" />
	<PunctChar char="$" use="symbol" />
	<PunctChar char="%" use="symbol" />
	<PunctChar char="&amp;" use="symbol" />
	<PunctChar char="^" use="symbol" />
	<PunctChar char="_" use="symbol" />
	<PunctChar char="`" use="symbol" />
	<PunctChar char="*" use="symbol" />
	<PunctChar char="?" use="symbol" />
	<PunctChar char="@" use="symbol" />
	<PunctChar char="~" use="symbol" />
	<PunctChar char="+" use="symbol" />
	<PunctChar char="-" use="symbol" />
	<PunctChar char="(" use="token" />
	<PunctChar char=")" use="token" />
	<PunctChar char="," use="token" />
	<PunctChar char="/" use="token" />
	<PunctChar char="=" use="token" />
	<PunctChar char="[" use="token" />
	<PunctChar char="\" use="token" />
	<PunctChar char="]" use="token" />
	<PunctChar char="{" use="token" />
	<PunctChar char="|" use="token" />
	<PunctChar char="}" use="token" />
	<PunctChar char="." use="pseudo" />
	<PunctChar char=":" use="label" />
	<PunctChar char=";" use="comment" />

	<!--......... machine instruction fields ............-->
	<Field name="address" type="required" numBits="12" relativity="absolute" signed="true" offset="0" defaultValue="0" id="Field57291982">
	</Field>
	<Field name="opcode" type="required" numBits="4" relativity="absolute" signed="true" offset="0" defaultValue="0" id="Field59e1d60c">
	</Field>
	<Field name="operation" type="required" numBits="16" relativity="absolute" signed="true" offset="0" defaultValue="0" id="Field4a4bb9b0">
	</Field>

	<!--............. FileChannels .................-->
	<!-- none -->

	<!--............. registers .....................-->
	<Register name="ac" width="16" id="module.Register1a20614" />
	<Register name="ar" width="12" id="module.Register1e58eaab" />
	<Register name="dr" width="16" id="module.Register49de0eda" />
	<Register name="e" width="1" id="module.Register5ecfa868" />
	<Register name="fgi" width="1" id="module.Register4f4c9703" />
	<Register name="fgo" width="1" id="module.Register169821f3" />
	<Register name="i" width="1" id="module.Register2f094524" />
	<Register name="inpr" width="8" id="module.Registerca63445" />
	<Register name="ir" width="16" id="module.Register27795e5d" />
	<Register name="outr" width="8" id="module.Register157c3fae" />
	<Register name="pc" width="12" id="module.Register28c52558" />
	<Register name="s" width="1" id="module.Register45230dab" />
	<Register name="tr" width="16" id="module.Register7e862f53" />

	<!--............. register arrays ...............-->
	<!-- none -->

	<!--............. condition bits ................-->
	<ConditionBit name="halt" bit="0" register="module.Register45230dab" halt="true" id="module.ConditionBitaf3fe62" />

	<!--............. rams ..........................-->
	<RAM name="main" length="4096" cellSize="16" id="module.RAMb9df581" />

	<!--............. set ...........................-->
	<Set name="ac &lt;- 0" register="module.Register1a20614" start="0" numBits="16" value="0" id="microinstruction.CpusimSetca84382" />
	<Set name="e &lt;- 0" register="module.Register5ecfa868" start="0" numBits="1" value="0" id="microinstruction.CpusimSet68fd8e6b" />

	<!--............. test ..........................-->
	<Test name="if (ac != 0)" register="module.Register1a20614" start="0" numBits="16" comparison="NE" value="0" omission="1" id="microinstruction.Test492aeae7" />
	<Test name="if (ac (15) != 0)" register="module.Register1a20614" start="0" numBits="1" comparison="NE" value="0" omission="1" id="microinstruction.Test3d92d91d" />
	<Test name="if (ac (15) != 1)" register="module.Register1a20614" start="0" numBits="1" comparison="NE" value="1" omission="1" id="microinstruction.Test7368397e" />
	<Test name="if (dr != 0)" register="module.Register49de0eda" start="0" numBits="16" comparison="NE" value="0" omission="1" id="microinstruction.Test77626fae" />
	<Test name="if (e != 0)" register="module.Register5ecfa868" start="0" numBits="1" comparison="NE" value="0" omission="1" id="microinstruction.Test6901de77" />

	<!--............. increment .....................-->
	<Increment name="ac &lt;- ac + 1" register="module.Register1a20614" overflowBit="module.ConditionBitaf3fe62" delta="1" id="microinstruction.Increment42f0a87b" />
	<Increment name="ar &lt;- ar + 1" register="module.Register1e58eaab" overflowBit="module.ConditionBitaf3fe62" delta="1" id="microinstruction.Increment7061ca92" />
	<Increment name="dr &lt;- dr + 1" register="module.Register49de0eda" overflowBit="module.ConditionBitaf3fe62" delta="1" id="microinstruction.Increment149ac42f" />
	<Increment name="pc &lt;- pc + 1" register="module.Register28c52558" overflowBit="module.ConditionBitaf3fe62" delta="1" id="microinstruction.Increment738f42ad" />

	<!--............. shift .........................-->
	<Shift name="ac &lt;- shl ac" type="cyclic" source="module.Register1a20614" destination="module.Register1a20614" direction="left" distance="1" id="microinstruction.Shift849e845" />
	<Shift name="ac &lt;- shr ac" type="cyclic" source="module.Register1a20614" destination="module.Register1a20614" direction="right" distance="1" id="microinstruction.Shift1da49cb" />

	<!--............. logical .......................-->
	<Logical name="ac &lt;- ac ^ dr" type="AND" source1="module.Register1a20614" source2="module.Register49de0eda" destination="module.Register1a20614" id="microinstruction.Logical63b2db4a" />
	<Logical name="ac &lt;- ac'" type="NOT" source1="module.Register1a20614" source2="module.Register1a20614" destination="module.Register1a20614" id="microinstruction.Logical307552e6" />
	<Logical name="e &lt;- e'" type="NOT" source1="module.Register5ecfa868" source2="module.Register5ecfa868" destination="module.Register5ecfa868" id="microinstruction.Logical664c5093" />

	<!--............. arithmetic ....................-->
	<Arithmetic name="ac &lt;- ac + dr" type="ADD" source1="module.Register1a20614" source2="module.Register49de0eda" destination="module.Register1a20614" overflowBit="module.ConditionBitaf3fe62" carryBit="module.ConditionBitaf3fe62" id="microinstruction.Arithmetic3244041e" />

	<!--............. branch ........................-->
	<!-- none -->

	<!--............. transferRtoR ..................-->
	<TransferRtoR name="ac (0) &lt;- e" source="module.Register5ecfa868" srcStartBit="0" dest="module.Register1a20614" destStartBit="15" numBits="1" id="microinstruction.TransferRtoR47d9e197" />
	<TransferRtoR name="ac (15) &lt;- e" source="module.Register5ecfa868" srcStartBit="0" dest="module.Register1a20614" destStartBit="0" numBits="1" id="microinstruction.TransferRtoR5da179e8" />
	<TransferRtoR name="ac &lt;- dr" source="module.Register49de0eda" srcStartBit="0" dest="module.Register1a20614" destStartBit="0" numBits="16" id="microinstruction.TransferRtoR596d7207" />
	<TransferRtoR name="ar &lt;- ir (0-11)" source="module.Register27795e5d" srcStartBit="4" dest="module.Register1e58eaab" destStartBit="0" numBits="12" id="microinstruction.TransferRtoR4b1be9c0" />
	<TransferRtoR name="ar &lt;- pc" source="module.Register28c52558" srcStartBit="0" dest="module.Register1e58eaab" destStartBit="0" numBits="12" id="microinstruction.TransferRtoR43c66c6d" />
	<TransferRtoR name="e &lt;- ac (0)" source="module.Register1a20614" srcStartBit="15" dest="module.Register5ecfa868" destStartBit="0" numBits="1" id="microinstruction.TransferRtoR15fe33c4" />
	<TransferRtoR name="e &lt;- ac (15)" source="module.Register1a20614" srcStartBit="0" dest="module.Register5ecfa868" destStartBit="0" numBits="1" id="microinstruction.TransferRtoR27318636" />
	<TransferRtoR name="i &lt;- ir (15)" source="module.Register27795e5d" srcStartBit="0" dest="module.Register2f094524" destStartBit="0" numBits="1" id="microinstruction.TransferRtoR33f03ef9" />
	<TransferRtoR name="pc &lt;- ar" source="module.Register1e58eaab" srcStartBit="0" dest="module.Register28c52558" destStartBit="0" numBits="12" id="microinstruction.TransferRtoR27a1e25d" />

	<!--............. transferRtoA ..................-->
	<!-- none -->

	<!--............. transferAtoR ..................-->
	<!-- none -->

	<!--............. decode ........................-->
	<Decode name="decode ir" ir="module.Register27795e5d" id="microinstruction.Decodec0ad0a9" />

	<!--............. set condition bit .............-->
	<SetCondBit name="halt &lt;- 1" bit="module.ConditionBitaf3fe62" value="1" id="microinstruction.SetCondBit3e3f3027" />

	<!--............. io ............................-->
	<!-- none -->

	<!--............. memory access .................-->
	<MemoryAccess name="ar &lt;- m[ar]" direction="read" memory="module.RAMb9df581" data="module.Register1e58eaab" address="module.Register1e58eaab" id="microinstruction.MemoryAccess51bab4f7" />
	<MemoryAccess name="dr &lt;- m[ar]" direction="read" memory="module.RAMb9df581" data="module.Register49de0eda" address="module.Register1e58eaab" id="microinstruction.MemoryAccess79210797" />
	<MemoryAccess name="ir &lt;- m[ar]" direction="read" memory="module.RAMb9df581" data="module.Register27795e5d" address="module.Register1e58eaab" id="microinstruction.MemoryAccess23741f82" />
	<MemoryAccess name="m[ar] &lt;- ac" direction="write" memory="module.RAMb9df581" data="module.Register1a20614" address="module.Register1e58eaab" id="microinstruction.MemoryAccess648dbdc3" />
	<MemoryAccess name="m[ar] &lt;- dr" direction="write" memory="module.RAMb9df581" data="module.Register49de0eda" address="module.Register1e58eaab" id="microinstruction.MemoryAccess6014b0a9" />
	<MemoryAccess name="m[ar] &lt;- pc" direction="write" memory="module.RAMb9df581" data="module.Register28c52558" address="module.Register1e58eaab" id="microinstruction.MemoryAccess11781e83" />

	<!--............. end ...........................-->
	<End id="microinstruction.End12f39b21" />

	<!--............. comment ...........................-->
	<!-- none -->

	<!--............. global equs ..................-->
	<!-- none -->

	<!--............. fetch sequence ................-->
	<FetchSequence>
		<Microinstruction microRef="microinstruction.TransferRtoR43c66c6d" />
		<Microinstruction microRef="microinstruction.MemoryAccess23741f82" />
		<Microinstruction microRef="microinstruction.Increment738f42ad" />
		<Microinstruction microRef="microinstruction.TransferRtoR33f03ef9" />
		<Microinstruction microRef="microinstruction.TransferRtoR4b1be9c0" />
		<Microinstruction microRef="microinstruction.Decodec0ad0a9" />
	</FetchSequence>

	<!--............. machine instructions ..........-->

	<MachineInstruction name="iof" opcode="f040" format="operation" >
	</MachineInstruction>

	<MachineInstruction name="ion" opcode="f080" format="operation" >
	</MachineInstruction>

	<MachineInstruction name="sko" opcode="f100" format="operation" >
	</MachineInstruction>

	<MachineInstruction name="ski" opcode="f200" format="operation" >
	</MachineInstruction>

	<MachineInstruction name="out" opcode="f400" format="operation" >
	</MachineInstruction>

	<MachineInstruction name="inp" opcode="f800" format="operation" >
	</MachineInstruction>

	<MachineInstruction name="hlt" opcode="7001" format="operation" >
		<Microinstruction microRef="microinstruction.SetCondBit3e3f3027" />
		<Microinstruction microRef="microinstruction.End12f39b21" />
	</MachineInstruction>

	<MachineInstruction name="sze" opcode="7002" format="operation" >
		<Microinstruction microRef="microinstruction.Test6901de77" />
		<Microinstruction microRef="microinstruction.Increment738f42ad" />
		<Microinstruction microRef="microinstruction.End12f39b21" />
	</MachineInstruction>

	<MachineInstruction name="sza" opcode="7004" format="operation" >
		<Microinstruction microRef="microinstruction.Test492aeae7" />
		<Microinstruction microRef="microinstruction.Increment738f42ad" />
		<Microinstruction microRef="microinstruction.End12f39b21" />
	</MachineInstruction>

	<MachineInstruction name="sna" opcode="7008" format="operation" >
		<Microinstruction microRef="microinstruction.Test7368397e" />
		<Microinstruction microRef="microinstruction.Increment738f42ad" />
		<Microinstruction microRef="microinstruction.End12f39b21" />
	</MachineInstruction>

	<MachineInstruction name="spa" opcode="7010" format="operation" >
		<Microinstruction microRef="microinstruction.Test3d92d91d" />
		<Microinstruction microRef="microinstruction.Increment738f42ad" />
		<Microinstruction microRef="microinstruction.End12f39b21" />
	</MachineInstruction>

	<MachineInstruction name="inc" opcode="7020" format="operation" >
		<Microinstruction microRef="microinstruction.Increment42f0a87b" />
		<Microinstruction microRef="microinstruction.End12f39b21" />
	</MachineInstruction>

	<MachineInstruction name="cil" opcode="7040" format="operation" >
		<Microinstruction microRef="microinstruction.TransferRtoR27318636" />
		<Microinstruction microRef="microinstruction.Shift849e845" />
		<Microinstruction microRef="microinstruction.TransferRtoR47d9e197" />
		<Microinstruction microRef="microinstruction.End12f39b21" />
	</MachineInstruction>

	<MachineInstruction name="cir" opcode="7080" format="operation" >
		<Microinstruction microRef="microinstruction.TransferRtoR15fe33c4" />
		<Microinstruction microRef="microinstruction.Shift1da49cb" />
		<Microinstruction microRef="microinstruction.TransferRtoR5da179e8" />
		<Microinstruction microRef="microinstruction.End12f39b21" />
	</MachineInstruction>

	<MachineInstruction name="cme" opcode="7100" format="operation" >
		<Microinstruction microRef="microinstruction.Logical664c5093" />
		<Microinstruction microRef="microinstruction.End12f39b21" />
	</MachineInstruction>

	<MachineInstruction name="cma" opcode="7200" format="operation" >
		<Microinstruction microRef="microinstruction.Logical307552e6" />
		<Microinstruction microRef="microinstruction.End12f39b21" />
	</MachineInstruction>

	<MachineInstruction name="cle" opcode="7400" format="operation" >
		<Microinstruction microRef="microinstruction.CpusimSet68fd8e6b" />
		<Microinstruction microRef="microinstruction.End12f39b21" />
	</MachineInstruction>

	<MachineInstruction name="cla" opcode="7800" format="operation" >
		<Microinstruction microRef="microinstruction.CpusimSetca84382" />
		<Microinstruction microRef="microinstruction.End12f39b21" />
	</MachineInstruction>

	<MachineInstruction name="isz_i" opcode="e" format="opcode address" >
		<Microinstruction microRef="microinstruction.MemoryAccess51bab4f7" />
		<Microinstruction microRef="microinstruction.MemoryAccess79210797" />
		<Microinstruction microRef="microinstruction.Increment149ac42f" />
		<Microinstruction microRef="microinstruction.MemoryAccess6014b0a9" />
		<Microinstruction microRef="microinstruction.Test77626fae" />
		<Microinstruction microRef="microinstruction.Increment738f42ad" />
		<Microinstruction microRef="microinstruction.End12f39b21" />
	</MachineInstruction>

	<MachineInstruction name="bsa_i" opcode="d" format="opcode address" >
		<Microinstruction microRef="microinstruction.MemoryAccess51bab4f7" />
		<Microinstruction microRef="microinstruction.MemoryAccess11781e83" />
		<Microinstruction microRef="microinstruction.Increment7061ca92" />
		<Microinstruction microRef="microinstruction.TransferRtoR27a1e25d" />
		<Microinstruction microRef="microinstruction.End12f39b21" />
	</MachineInstruction>

	<MachineInstruction name="bun_i" opcode="c" format="opcode address" >
		<Microinstruction microRef="microinstruction.MemoryAccess51bab4f7" />
		<Microinstruction microRef="microinstruction.TransferRtoR27a1e25d" />
		<Microinstruction microRef="microinstruction.End12f39b21" />
	</MachineInstruction>

	<MachineInstruction name="sta_i" opcode="b" format="opcode address" >
		<Microinstruction microRef="microinstruction.MemoryAccess51bab4f7" />
		<Microinstruction microRef="microinstruction.MemoryAccess648dbdc3" />
		<Microinstruction microRef="microinstruction.End12f39b21" />
	</MachineInstruction>

	<MachineInstruction name="lda_i" opcode="a" format="opcode address" >
		<Microinstruction microRef="microinstruction.MemoryAccess51bab4f7" />
		<Microinstruction microRef="microinstruction.MemoryAccess79210797" />
		<Microinstruction microRef="microinstruction.TransferRtoR596d7207" />
		<Microinstruction microRef="microinstruction.End12f39b21" />
	</MachineInstruction>

	<MachineInstruction name="add_i" opcode="9" format="opcode address" >
		<Microinstruction microRef="microinstruction.MemoryAccess51bab4f7" />
		<Microinstruction microRef="microinstruction.MemoryAccess79210797" />
		<Microinstruction microRef="microinstruction.Arithmetic3244041e" />
		<Microinstruction microRef="microinstruction.End12f39b21" />
	</MachineInstruction>

	<MachineInstruction name="and_i" opcode="8" format="opcode address" >
		<Microinstruction microRef="microinstruction.MemoryAccess51bab4f7" />
		<Microinstruction microRef="microinstruction.MemoryAccess79210797" />
		<Microinstruction microRef="microinstruction.Logical63b2db4a" />
		<Microinstruction microRef="microinstruction.End12f39b21" />
	</MachineInstruction>

	<MachineInstruction name="isz" opcode="6" format="opcode address" >
		<Microinstruction microRef="microinstruction.MemoryAccess79210797" />
		<Microinstruction microRef="microinstruction.Increment149ac42f" />
		<Microinstruction microRef="microinstruction.MemoryAccess6014b0a9" />
		<Microinstruction microRef="microinstruction.Test77626fae" />
		<Microinstruction microRef="microinstruction.Increment738f42ad" />
		<Microinstruction microRef="microinstruction.End12f39b21" />
	</MachineInstruction>

	<MachineInstruction name="bsa" opcode="5" format="opcode address" >
		<Microinstruction microRef="microinstruction.MemoryAccess11781e83" />
		<Microinstruction microRef="microinstruction.Increment7061ca92" />
		<Microinstruction microRef="microinstruction.TransferRtoR27a1e25d" />
		<Microinstruction microRef="microinstruction.End12f39b21" />
	</MachineInstruction>

	<MachineInstruction name="bun" opcode="4" format="opcode address" >
		<Microinstruction microRef="microinstruction.TransferRtoR27a1e25d" />
		<Microinstruction microRef="microinstruction.End12f39b21" />
	</MachineInstruction>

	<MachineInstruction name="sta" opcode="3" format="opcode address" >
		<Microinstruction microRef="microinstruction.MemoryAccess648dbdc3" />
		<Microinstruction microRef="microinstruction.End12f39b21" />
	</MachineInstruction>

	<MachineInstruction name="lda" opcode="2" format="opcode address" >
		<Microinstruction microRef="microinstruction.MemoryAccess79210797" />
		<Microinstruction microRef="microinstruction.TransferRtoR596d7207" />
		<Microinstruction microRef="microinstruction.End12f39b21" />
	</MachineInstruction>

	<MachineInstruction name="add" opcode="1" format="opcode address" >
		<Microinstruction microRef="microinstruction.MemoryAccess79210797" />
		<Microinstruction microRef="microinstruction.Arithmetic3244041e" />
		<Microinstruction microRef="microinstruction.End12f39b21" />
	</MachineInstruction>

	<MachineInstruction name="and" opcode="0" format="opcode address" >
		<Microinstruction microRef="microinstruction.MemoryAccess79210797" />
		<Microinstruction microRef="microinstruction.Logical63b2db4a" />
		<Microinstruction microRef="microinstruction.End12f39b21" />
	</MachineInstruction>

	<!--............. highlighting info .............-->
	<HighlightingInfo>
	</HighlightingInfo>

	<!--............. loading info ..................-->
	<LoadingInfo ram="module.RAMb9df581" startingAddress="34" />

	<!--............. module window info ............-->
	<ModuleWindowsInfo>
		<RegisterWindowInfo base="Hexadecimal" 
			top="10" left="464" width="369" height="455" />
		<RAMWindowInfo ram="module.RAMb9df581" cellSize="1" contentsbase="Hexadecimal" addressbase="Hexadecimal" 
			top="5" left="847" width="503" height="452" />
	</ModuleWindowsInfo>

</Machine>
